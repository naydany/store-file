
import tkinter as tk
# from PIL import Image,ImageTk

# Variable
keyPressed = []
SPEED = 7
TIME = 10
GRAVITY_FORCE = 9

scroll_offset = 0
obstacles = []
WIN_WIDTH=1920
# WIN_HIGHT=700
target = None
is_jumping = False
jump_count = 0

direction = 1
# Create the bullet

window = tk.Tk()
window.title("Mr.Incredible")
action = 0

canvas = tk.Canvas(window, width=1920, height=1080)
canvas.pack()

image1 = tk.PhotoImage(file="power_man.png")
player = canvas.create_image(100, 100, image=image1)

image6 = tk.PhotoImage(file="bg_show1.png")
image_obstacle1 = tk.PhotoImage(file="ground.png")
image_obstacle2= tk.PhotoImage(file="image_obstacle2.png")
image_obstacle3 = tk.PhotoImage(file="image_obstacle3.png")
# land = canvas.create_rectangle(0, 500, 1536, 800, fill="Brown", tags="wall")


canvas.create_image(630, 352, image=image6)
background_image_label_1 = canvas.create_image(0, 0, anchor=tk.NW, image=image6)
background_image_label_2 = canvas.create_image(WIN_WIDTH, 0, anchor=tk.NW, image=image6)


def game():
    canvas.pack()
    canvas.bind_all("<KeyPress>",handle_key_press)
    canvas.bind_all("<KeyRelease>",handle_key_release)
    canvas.focus_set()
    create_obstacles()
    # create_enemies()
    # enemy()
      

    # Create wall of game
def create_obstacles():
    walls = [
        canvas.create_rectangle(230, 240, 400, 280, fill="white", tags="wall"),
        canvas.create_rectangle(480, 100, 650, 130, fill="white", tags="wall"),
        canvas.create_rectangle(780, 200, 950, 230, fill="white", tags="wall"),
        canvas.create_rectangle(450, 300, 650, 330, fill="Red", tags="wall"),
        canvas.create_rectangle(850, 360, 900, 390, fill="Red", tags="wall"),
        canvas.create_rectangle(480, 400, 950, 430, fill="white", tags="wall"),
        canvas.create_rectangle(1050, 380, 1150, 410, fill="white", tags="wall"),
        canvas.create_rectangle(240, 480, 330, 510, fill="white", tags="wall")
        ]
    for obstacle in walls:
        obstacles.append(obstacle)


# image_1 = Image.open("img/0.png")
# imageTk_1 = ImageTk.PhotoImage(image_1)

# def create_enemies():
#     enemys = [
#         #create_ennemy(230,40),
#         #create_ennemy(780,200),
#         #create_ennemy(450,300),
#         #create_ennemy(230,40),
#         #create_ennemy(230,40),
#         #create_ennemy(230,40),
#         canvas.create_image(500,200, image= imageTk_1, anchor="center",tags= "change"),
#         canvas.create_image(500,240, image= imageTk_1, anchor="center"),
#         canvas.create_image(500,280, image= imageTk_1, anchor="center"),
#         canvas.create_image(500,340, image= imageTk_1, anchor="center"),
#         canvas.create_image(500,380, image= imageTk_1, anchor="center"),
#         canvas.create_image(500,420, image= imageTk_1, anchor="center")
#         ]
#     for enemy in enemys:
#         pol_pots.append(enemy)
        
# def enemy():
#     for pol_pot in pol_pots:
#         create_bullet(pol_pot)
#         move_enemy(pol_pot)



# def create_bullet(pol_pot):
#     global bullet, update_id
#     hx1, hy1 = canvas.coords(pol_pot)
#     px1, py1, px2, py2 = canvas.coords(player)
#     if hx1 - px2 <= SHOOTING_DISTANCE and bullet is None:

#         # Enemy is within shooting distance and bullet is not present, shoot
#         bullet = canvas.create_rectangle(hx1, (hy1) + 5 , hx1 - 10, (hy1) + 10, fill="orange")
        

    # # Move the bullet
    # if bullet is not None:
    #     canvas.move(bullet, -2, 0)
    #     bx1, by1, bx2, by2 = canvas.coords(bullet)


# # Check for bullet-player collision
#         if bx2 < 0:
#             # Bullet reached the end, remove it
#             canvas.delete(bullet)
#             bullet = None
#         elif bx2 > px1 and by1 < py2 and by2 > py1:
#             # Bullet collided with the player, end the game
#             canvas.create_text(900 // 2, 900 // 2, text="Game Over", font=("Arial", 24))
        
#     # window.after_cancel(update_id)
#     update_id = window.after(20,create_bullet, pol_pot)

# def move_enemy(pol_pot):
#     global enemy_ation, direction
#     canvas.move(pol_pot, direction, 0)
#     enemy_ation += direction
#     if enemy_ation >= 120:
#         direction = -1
#     elif enemy_ation <= 10:
#         direction = 1
    
#     canvas.after(100, move_enemy,pol_pot)


# study of key that has enter by player
def handle_key_press(event):
    global is_jumping, jump_count
    if event.keysym == "Left" and "Left" not in keyPressed:
        keyPressed.append("Left")
    elif event.keysym == "Right" and "Right" not in keyPressed:
        keyPressed.append("Right")
    elif event.keysym == "Up" and not is_jumping:
        # jump_animation()
        is_jumping = True
        jump_count = 20
    
    # function for release key of player
def handle_key_release(event):
    if event.keysym == "Left" and "Left" in keyPressed:
        keyPressed.remove("Left")
    elif event.keysym == "Right" and "Right" in keyPressed:
        keyPressed.remove("Right")
    

    # function for move character
def move_player():
    global action
    global is_jumping, jump_count
    x, y = 0, 0
    if "Left" in keyPressed:
        x = -10
        action -= 10
    elif "Right" in keyPressed:
        action += 10
        x = 10
        # walk_animation()   

    if is_jumping:
        y = -GRAVITY_FORCE
        jump_count -= 1
        if jump_count == 0:
            is_jumping = False

    if check_movement(player, x, y):
            canvas.move(player, x, y)
    scroll_screen(x)

    if not is_jumping:
        apply_gravity()
    # add functions

    window.after(20,move_player)
         


# # Load your action images
# image1 = tk.PhotoImage(file="jump/0.png")
# image2 = tk.PhotoImage(file="jump/1.png")
# image3 = tk.PhotoImage(file="jump/2.png")
# image4 = tk.PhotoImage(file="jump/3.png")
# image5 = tk.PhotoImage(file="jump/4.png")


# # Define the sequence of images
# image_sequence = [image1, image2, image3,image4,image5]
# def jump_animation():
#     for image in image_sequence:
#         canvas.itemconfig(object_id, image=image)
#         canvas.update()  # Refresh the canvas
#         canvas.after(100)  # Delay between each image
        
# # Load your action images
# image_walk1 = tk.PhotoImage(file="Run/0.png")
# image_walk2 = tk.PhotoImage(file="Run/1.png")
# image_walk3 = tk.PhotoImage(file="Run/2.png")
# image_walk4 = tk.PhotoImage(file="Run/3.png")
# image_walk5 = tk.PhotoImage(file="Run/4.png")
# image_walk6 = tk.PhotoImage(file="Run/5.png")

# def walk_animation():
#     global action
#     if action == 10:
#         canvas.itemconfig(player, image = image_walk1)
#     elif action == 20:
#         canvas.itemconfig(player, image = image_walk2)
#     elif action == 20:
#         canvas.itemconfig(player, image = image_walk3)
#     elif action == 20:
#         canvas.itemconfig(player, image = image_walk4)
#     elif action == 20:
#         canvas.itemconfig(player, image = image_walk5)
#     elif action == 20:
#         canvas.itemconfig(player, image = image_walk6)
#     elif action == 100:
#         action = 0
#     return
        
    # if px // 2 == 0:
    #     canvas.itemconfig(player, image=walk_action[0])
    

# def walk_animation():
    # for image in walk_action:
    #     canvas.itemconfig(player, image=image)
    #     canvas.update()  # Refresh the canvas
    #     canvas.after(100)  # Delay between each image

# Check condition of wall python
def check_movement(item, dx=0, dy=0):
    item_coords = canvas.coords(item)
    new_x1 = item_coords[0] + dx + 50
    new_y1 = item_coords[1] + dy + 50
    new_x2 = item_coords[0] + dx - 50
    new_y2 = item_coords[1] + dy - 50

    overlapping_objects = canvas.find_overlapping(new_x1, new_y1, new_x2, new_y2)

    for wall_id in canvas.find_withtag("wall"):
        if wall_id in overlapping_objects:
            return False

    return True

# Gravity for character
def apply_gravity():
    if not check_movement(player, 0, GRAVITY_FORCE):
        return

    canvas.move(player, 0, GRAVITY_FORCE)
    scroll_screen(0)


# Scroll screen
def scroll_screen(x_direction):
    global scroll_offset
    player_coords = canvas.coords(player)
    x1, x2  = player_coords
    
    if x_direction > 0 and x2 >= 300 -scroll_offset:
        scroll_offset += 40
        canvas.move(player, -10, 0)
        for obstacle in obstacles:
                canvas.move(obstacle, -10, 0)

    elif x_direction < 0 and x1 <=scroll_offset:
        scroll_offset -= 40
        canvas.move(player, 10, 0)
        for obstacle in obstacles:
            canvas.move(obstacle, 10, 0)



                
# walk_animation()       
game()
move_player()
window.mainloop()